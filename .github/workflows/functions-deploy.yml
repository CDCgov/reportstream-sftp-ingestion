name: Deploy Node.js project to Azure Function App

on:
  workflow_call:
    inputs:
      ENVIRONMENT:
        required: true
        type: string
      TF_ENVIRONMENT:
        required: true
        type: string

    secrets:
      AZURE_CLIENT_ID:
        required: true
      AZURE_TENANT_ID:
        required: true
      AZURE_SUBSCRIPTION_ID:
        required: true

permissions:
  contents: read

env:
  # The AZURE_FUNCTIONAPP_NAME has to match the azurerm_linux_function_app's name in functions.tf
  AZURE_FUNCTIONAPP_NAME: 'polling-function-${{inputs.TF_ENVIRONMENT}}'
  AZURE_FUNCTIONAPP_PACKAGE_PATH: 'azure_functions'
  NODE_VERSION: '20.x'

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    environment:
      ${{ inputs.ENVIRONMENT }}
    permissions:
      id-token: write
      contents: read

    steps:
      - name: 'Checkout GitHub Action'
        uses: actions/checkout@v4

      - name: 'Setup Node ${{ env.NODE_VERSION }} Environment'
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: 'Resolve Project Dependencies Using Npm'
        shell: bash
        run: |
          pushd './${{ env.AZURE_FUNCTIONAPP_PACKAGE_PATH }}'
          npm install
          npm run build --if-present
          npm run test --if-present
          popd

      - name: 'Login via Azure CLI'
        uses: azure/login@v2
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

      - name: 'Get Publish Profile'
        run: |
          PUBLISH_PROFILE=$(az webapp deployment list-publishing-profiles -g "csels-rsti-${{ inputs.TF_ENVIRONMENT }}-moderate-rg" -n "polling-function-${{ inputs.TF_ENVIRONMENT }}" --xml)
          echo "::add-mask::$PUBLISH_PROFILE"
          echo "PUBLISH_PROFILE=$PUBLISH_PROFILE" >> $GITHUB_OUTPUT
        id: getPublishProfile

      - name: 'Run Azure Functions Action'
        uses: Azure/functions-action@v1
        id: azure-function-deploy
        with:
          app-name: ${{ env.AZURE_FUNCTIONAPP_NAME }}
          package: ${{ env.AZURE_FUNCTIONAPP_PACKAGE_PATH }}
          publish-profile: ${{ steps.getPublishProfile.outputs.PUBLISH_PROFILE }}

      - name: 'Retrieve Azure FunctionApp loaded Functions'
        run: |
          FUNCTION_LIST=$(az functionapp function list -g "csels-rsti-${{ inputs.TF_ENVIRONMENT }}-moderate-rg" -n "polling-function-${{ inputs.TF_ENVIRONMENT }}")
          if [[ $FUNCTION_LIST = *"ResourceNotFound"* ]] \
          then 
            FAIL=true
          fi
          echo "$FAIL" >> $GITHUB_OUTPUT
        id: getFunctionList

      - name: 'Azure FunctionApp Check'
        if: steps.getFunctionList.outputs.FAIL == true
        run: |
          echo 'Azure FunctionApp Function is empty'
          exit 1  
