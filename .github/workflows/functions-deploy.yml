# This workflow will build a container and deploy it to an Azure Functions App on Linux when a commit is pushed to your default branch.
#
# This workflow assumes you have already created the target Azure Functions app.
# For instructions see https://learn.microsoft.com/en-us/azure/azure-functions/functions-create-function-linux-custom-image?tabs=in-process%2Cbash%2Cazure-cli&pivots=programming-language-csharp
#
# To configure this workflow:
# 1. Set up the following secrets in your repository:
#   - AZURE_RBAC_CREDENTIALS
#   - REGISTRY_USERNAME
#   - REGISTRY_PASSWORD
# 2. Change env variables for your configuration.
#
# For more information on:
#   - GitHub Actions for Azure: https://github.com/Azure/Actions
#   - Azure Functions Container Action: https://github.com/Azure/functions-container-action
#   - Azure Service Principal for RBAC: https://github.com/Azure/functions-action#using-azure-service-principal-for-rbac-as-deployment-credential
#
# For more samples to get started with GitHub Action workflows to deploy to Azure: https://github.com/Azure/actions-workflow-samples/tree/master/FunctionApp

name: Deploy Node.js project to Azure Function App

on:
  workflow_call:
    inputs:
      ENVIRONMENT:
        required: true
        type: string
      REGISTRY:
        required: true
        type: string
      REPO:
        required: true
        type: string
      APP:
        required: true
        type: string
    secrets:
      AZURE_CLIENT_ID:
        required: true
      AZURE_TENANT_ID:
        required: true
      AZURE_SUBSCRIPTION_ID:
        required: true
      AZURE_FUNCTIONAPP_PUBLISH_PROFILE:
        required: true

permissions:
  contents: read

env:
  # AZURE_FUNCTIONAPP_NAME has to match the azurerm_linux_function_app's name in functions.tf
  AZURE_FUNCTIONAPP_NAME: 'polling-function-${{ inputs.ENVIRONMENT }}'
  AZURE_FUNCTIONAPP_PACKAGE_PATH: './azure_functions'
  NODE_VERSION: '20.x'

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    environment:
      ${{ inputs.ENVIRONMENT }}
    permissions:
      id-token: write
      contents: read

    steps:
      - name: 'Checkout GitHub Action'
        uses: actions/checkout@v4

      - name: 'Setup Node ${{ env.NODE_VERSION }} Environment'
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: 'Resolve Project Dependencies Using Npm'
        shell: bash
        run: |
          pushd './${{ env.AZURE_FUNCTIONAPP_PACKAGE_PATH }}'
          npm install
          npm run build --if-present
          npm run test --if-present
          popd


      - name: 'List Directory Contents'
        run: |
          ls -R ./${{ env.AZURE_FUNCTIONAPP_PACKAGE_PATH }}

      - name: 'Login via Azure CLI'
        uses: azure/login@v2
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

      - name: 'Get Publish Profile'
        run: |
          PUBLISH_PROFILE=$(az webapp deployment list-publishing-profiles -g "csels-rsti-${{ inputs.ENVIRONMENT }}-moderate-rg" -n "polling-function-${{ inputs.ENVIRONMENT }}" --xml)
          echo "::add-mask::$PUBLISH_PROFILE"
          echo "PUBLISH_PROFILE=$PUBLISH_PROFILE" >> $GITHUB_OUTPUT
        id: getPublishProfile

      - name: 'Run Azure Functions Action'
        uses: Azure/functions-action@v1
        id: azure-function-deploy
        with:
          app-name: ${{ env.AZURE_FUNCTIONAPP_NAME }}
          package: ${{ env.AZURE_FUNCTIONAPP_PACKAGE_PATH }}
          publish-profile: ${{ steps.getPublishProfile.outputs.PUBLISH_PROFILE }}
